{
  "_args": [
    [
      {
        "raw": "ocha",
        "scope": null,
        "escapedName": "ocha",
        "name": "ocha",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/djr/Code/Turing/mod4/pallette-picker"
    ]
  ],
  "_from": "ocha@latest",
  "_id": "ocha@0.0.1",
  "_inCache": true,
  "_location": "/ocha",
  "_nodeVersion": "5.3.0",
  "_npmOperationalInternal": {
    "host": "packages-5-east.internal.npmjs.com",
    "tmp": "tmp/ocha-0.0.1.tgz_1456817943281_0.26338812219910324"
  },
  "_npmUser": {
    "name": "gakimball",
    "email": "geoff@zurb.com"
  },
  "_npmVersion": "3.7.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "ocha",
    "scope": null,
    "escapedName": "ocha",
    "name": "ocha",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/ocha/-/ocha-0.0.1.tgz",
  "_shasum": "3ab023c7019d8b706041057a37ce3fbb20d96752",
  "_shrinkwrap": null,
  "_spec": "ocha",
  "_where": "/Users/djr/Code/Turing/mod4/pallette-picker",
  "author": {
    "name": "Geoff Kimball",
    "email": "geoff@geoffkimball.com",
    "url": "http://geoffkimball.com"
  },
  "bugs": {
    "url": "https://github.com/gakimball/ocha/issues"
  },
  "dependencies": {},
  "description": "BDD-style Sass assertion library.",
  "devDependencies": {
    "mocha": "^2.4.5",
    "node-sass": "^3.4.2"
  },
  "directories": {},
  "dist": {
    "shasum": "3ab023c7019d8b706041057a37ce3fbb20d96752",
    "tarball": "https://registry.npmjs.org/ocha/-/ocha-0.0.1.tgz"
  },
  "gitHead": "4c05b048f3f84bd8ce9d240ac39aa9faedf607b4",
  "homepage": "https://github.com/gakimball/ocha#readme",
  "keywords": [
    "sass",
    "testing",
    "assert"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "gakimball",
      "email": "geoff@zurb.com"
    }
  ],
  "name": "ocha",
  "optionalDependencies": {},
  "readme": "# Ocha\n\nA BDD-style assertion library for Sass. Eventually it will maybe work with [True](https://github.com/oddbird/true).\n\n## Installation\n\nIt's not on npm yet!\n\n## Usage\n\nUse the `expect()` mixin to write an assertion. Pass a value to check, and then a series of language functions. Most assertions also require a final value to compare with.\n\n```scss\n@import 'ocha';\n\n$value: 5\n@require expect($value to equal 5);\n```\n\n## API\n\n### Language Chains\n\nThese functions don't do anything&mdash;they just make your assertion more readable.\n\n- `to`\n- `be`\n- `been`\n- `is`\n- `which`\n- `and`\n- `has`\n- `have`\n- `with`\n- `at`\n- `of`\n- `same`\n\n### Negation\n\nThrow the word `not` in an assertion to check for the opposite result.\n\nNote that, since `not` is a special keyword in Sass, you have to put it in quotes.\n\n```scss\n@include expect(5 to 'not' equal 6);\n```\n\n### Comparison\n\n#### equal($value)\n\nCheck if a value equals `$value`.\n\n```scss\n@include expect(5 to equal 5);\n@include expect('string' to equal 'string');\n```\n\n#### above($floor)\n\nCheck if a value is *greater than* `$floor`.\n\n```scss\n@include expect(5 to be above 3);\n```\n\n#### least($floor)\n\nCheck if a value is *greater than or equal to* `$floor`.\n\n```scss\n@include expect(5 to be at least 5);\n@include expect(10 to be at least 5);\n```\n\n#### below($floor)\n\nCheck if a value is *less than* `$floor`.\n\n```scss\n@include expect(5 to be below 3);\n```\n\n#### most($floor)\n\nCheck if a value is *less than or equal to* `$floor`.\n\n```scss\n@include expect(5 to be at most 5);\n@include expect(10 to be at most 5);\n```\n\n#### within($floor, $ceiling)\n\nCheck if a value is within the range of `$floor` and `$ceiling` (including those values).\n\n```scss\n@include expect(5 to be within (0, 10));\n```\n\n### Type Comparison\n\n#### a($type)\n\nCheck if a value has the type of `$type`.\n\n```scss\n@include expect(5 to be a number);\n@include expect('string' to be a string);\n@include expect(#fff to be a color);\n@include expect((0, 1, 2) to be a list);\n```\n\n#### ok\n\nCheck if a value is truthy:\n\n- `true`\n- A list or map that isn't empty\n- A number greater than 0\n\n```scss\n@include expect(true to be ok);\n```\n\n#### true\n\nCheck if a value is `true`. Note that this function has to be used with quotes around it, because it's a special keyword in Sass.\n\n```scss\n@include expect(true to be 'true');\n```\n\n#### false\n\nCheck if a value is `false`. Note that this function has to be used with quotes around it, because it's a special keyword in Sass.\n\n```scss\n@include expect(false to be 'false');\n```\n\n#### null\n\nCheck if a value is `null`. Note that this function has to be used with quotes around it, because it's a special keyword in Sass.\n\n```scss\n@include expect(null to be 'null');\n```\n\n### Inspection\n\n#### lengthOf($length)\n\nCheck if a list has a length equal to `$length`.\n\n```scss\n$list: (0, 1, 2);\n@include expect($list to have lengthOf 3);\n```\n\n#### length\n\nCheck if a list has a length that satisfies a certain criteria. Pair it with `above`, `least`, `below`, `most`, or `within`.\n\n```scss\n$list: (0, 1, 2);\n@include expect($list to have length above 1);\n@include expect($list to have length below 4);\n@include expect($list to have length within (0, 5));\n```\n\n#### empty\n\nCheck if a list has a length of 0.\n\n```scss\n$list: ();\n@include expect($list to be empty);\n```\n\n#### string($substring)\n\nCheck if a string contains `$substring`.\n\n```scss\n@include expect('string' to have string 'str');\n```\n\n#### contain($needle)\n\nCheck if a string contains `$needle`, or check if a list contains `$needle`.\n\n```scss\n@include expect('string' to contain 'str');\n@include expect((one, two) to contain 'one');\n```\n\n#### include($needle)\n\nCheck if a string contains `$needle`, or check if a list contains `$needle`.\n\n```scss\n@include expect('string' to include 'str');\n@include expect((one, two) to include 'one');\n```\n\n#### keys($keys)\n\nIf you call `keys` by itself, check if a map contains *every key* within `$keys` and *no other keys*.\n\n```scss\n$map: (\n  one: 'one',\n  two: 'two',\n);\n\n@include expect($map to have keys (one, two));\n```\n\nIf you call `contain keys`, check if a map contains *every key* within `$keys`. If the map has other keys, that's fine.\n\n```scss\n$map: (\n  one: 'one',\n  two: 'two',\n);\n\n@include expect($map to have keys (one));\n```\n\nIf you call `any keys`, check if a map contains *any key* within `$keys`.\n\n```scss\n$map: (\n  one: 'one',\n  two: 'two',\n);\n\n@include expect($map to have keys (one, two, three, four));\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/gakimball/ocha.git"
  },
  "scripts": {
    "test": "mocha"
  },
  "version": "0.0.1"
}
